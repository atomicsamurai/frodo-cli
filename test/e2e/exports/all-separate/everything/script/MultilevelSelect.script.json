{
  "meta": {
    "exportDate": "2024-03-29T19:29:02.729Z",
    "exportTool": "frodo",
    "exportToolVersion": "v2.0.0-75 [v20.5.1]",
    "exportedBy": "volker.scheuber@forgerock.com",
    "origin": "https://openam-frodo-dev.forgeblocks.com/am",
    "originAmVersion": "7.5.0"
  },
  "script": {
    "95143d29-e417-49a8-a86c-a3b4cf8fd8ed": {
      "_id": "95143d29-e417-49a8-a86c-a3b4cf8fd8ed",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": null,
      "evaluatorVersion": "2.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "MultilevelSelect",
      "script": [
        "",
        "function getCountries(data) {",
        "  var c = [];",
        "  data.forEach(e=>c.push(e.name));",
        "  return c;",
        "}",
        "",
        "function getStates(data, c) {",
        "  var s = [];",
        "  data[c].states.forEach(e=>s.push(e.name));",
        "  return s;",
        "}",
        "",
        "function getCities(data, c, s) {",
        "  var ci = [];",
        "  data[c].states[s].cities.forEach(e=>ci.push(e.name));",
        "  return ci;",
        "}",
        "",
        "function getData() {",
        "  var requestOptions = {",
        "    method: 'GET',",
        "  }",
        "",
        "  var requestURL = 'https://gist.githubusercontent.com/atomicsamurai/48c891e8a78e8aa340c0fff96d4806f4/raw/99461ff7cd3ca1b0b7a551942915357e3a438ab5/country-state-city.json';",
        "  var response = httpClient.send(requestURL, requestOptions).get();",
        "",
        "  if (response.status === 200) {",
        "    return JSON.parse(response.text());",
        "  } else {",
        "    null;",
        "  }",
        "}",
        "",
        "(function () {",
        "  try {",
        "    var data = getData();",
        "    var states = [];",
        "    var cities = [];",
        "    var selectedCountry = 0;",
        "    var selectedState = 0;",
        "    if (callbacks.isEmpty()) {",
        "      selectedCountry = nodeState.get('selectedCountry')?parseInt(nodeState.get('selectedCountry')):0;",
        "      logger.error('sandlog: selected country {}', selectedCountry);",
        "      selectedState = nodeState.get('selectedState')?parseInt(nodeState.get('selectedState')):0;",
        "      logger.error('sandlog: selected state {}', selectedState);",
        "      callbacksBuilder.choiceCallback('Select country', getCountries(data), selectedCountry, false);",
        "      states = getStates(data, selectedCountry);",
        "      callbacksBuilder.choiceCallback('Select state', states, selectedState, false);",
        "      cities = getCities(data, selectedCountry, selectedState);",
        "      logger.error('sandlog: here 1');",
        "      cities.forEach(e=>{",
        "        callbacksBuilder.textOutputCallback(0, e);",
        "      });",
        "      logger.error('sandlog: here 2');",
        "      callbacksBuilder.confirmationCallback(0, ['Update', 'Complete'], 0);",
        "      logger.error('sandlog: here 3: {}', callbacks.getChoiceCallbacks().size());",
        "      callbacks.getChoiceCallbacks().get(0).setSelectedIndex(selectedCountry);",
        "      logger.error('sandlog: here 4');",
        "      callbacks.getChoiceCallbacks().get(1).setSelectedIndex(selectedState);",
        "",
        "      logger.error('sandlog: here 5');",
        "      var script = `",
        "          function showOrgDetails() {",
        "            var wrapper = document.getElementById('wrapper');",
        "            wrapper.insertAdjacentHTML('beforebegin', '<div>test</div>');",
        "          }",
        "          setTimeout(showOrgDetails, 100);",
        "          `;",
        "      // callbacksBuilder.scriptTextOutputCallback(script);",
        "      // callbacksBuilder.hiddenValueCallback('selectionChanged', 'false')",
        "    } else {",
        "      selectedCountry = callbacks.getChoiceCallbacks().get(0)[0];",
        "      logger.error('sandlog: set selected country {}', selectedCountry);",
        "      nodeState.putShared('selectedCountry', selectedCountry);",
        "      selectedState = callbacks.getChoiceCallbacks().get(1)[0];",
        "      logger.error('sandlog: set selected state {}', selectedState);",
        "      nodeState.putShared('selectedState', selectedState);",
        "      if (callbacks.getConfirmationCallbacks().get(0) == 0) {",
        "        outcome = 'update';",
        "      } else {",
        "        outcome = 'complete';",
        "      }",
        "    }",
        "  } catch (e) {",
        "    logger.error('sandlog: error: {} ' + e, e);",
        "    outcome = 'error'",
        "  }",
        "})();"
      ]
    }
  }
}