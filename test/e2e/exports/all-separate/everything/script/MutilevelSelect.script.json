{
  "meta": {
    "exportDate": "2024-03-29T19:29:02.736Z",
    "exportTool": "frodo",
    "exportToolVersion": "v2.0.0-75 [v20.5.1]",
    "exportedBy": "volker.scheuber@forgerock.com",
    "origin": "https://openam-frodo-dev.forgeblocks.com/am",
    "originAmVersion": "7.5.0"
  },
  "script": {
    "cf63df8d-30e4-4839-b671-5b24006a3204": {
      "_id": "cf63df8d-30e4-4839-b671-5b24006a3204",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": null,
      "evaluatorVersion": "1.0",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "MutilevelSelect",
      "script": [
        "// legacy - multiple choice callbacks",
        "",
        "var fr = JavaImporter(",
        "  org.forgerock.http.protocol.Request,",
        "  org.forgerock.http.protocol.Response,",
        "  org.forgerock.openam.auth.node.api.Action,",
        "  javax.security.auth.callback.TextOutputCallback,",
        "  javax.security.auth.callback.ChoiceCallback,",
        "  javax.security.auth.callback.ConfirmationCallback,",
        "  com.sun.identity.authentication.callbacks.HiddenValueCallback,",
        "  com.sun.identity.authentication.callbacks.ScriptTextOutputCallback,",
        "  javax.security.auth.callback.TextInputCallback,",
        "  org.forgerock.openam.authentication.callbacks.BooleanAttributeInputCallback",
        ");",
        "",
        "function generateNumericToken(format) {",
        "  return format.replace(/[x]/g, function(c) {",
        "      var r = Math.random()*10|0;",
        "      var v = r;",
        "      return v.toString(10);",
        "  });",
        "}",
        "",
        "function getCountries(data) {",
        "  var c = [];",
        "  data.forEach(e=>c.push(e.name));",
        "  return c;",
        "}",
        "",
        "function getStates(data, c) {",
        "  var s = [];",
        "  data[c].states.forEach(e=>s.push(e.name));",
        "  return s;",
        "}",
        "",
        "function getCities(data, c, s) {",
        "  var ci = [];",
        "  data[c].states[s].cities.forEach(e=>ci.push(e.name));",
        "  return ci;",
        "}",
        "",
        "function getData() {",
        "  var requestURL = 'https://gist.githubusercontent.com/atomicsamurai/48c891e8a78e8aa340c0fff96d4806f4/raw/99461ff7cd3ca1b0b7a551942915357e3a438ab5/country-state-city.json';",
        "  var request = new org.forgerock.http.protocol.Request();",
        "  request.setUri(requestURL);",
        "  request.setMethod('GET');",
        "  request.getHeaders().add('Content-Type', 'application/json;');",
        "  ",
        "  var response = httpClient.send(request).get();  ",
        "  var responseCode = response.getStatus().getCode();",
        "  if (responseCode === 200) {",
        "    return JSON.parse(response.getEntity().getString());",
        "  } else {",
        "    return null;",
        "  }",
        "}",
        "",
        "(function () {",
        "  try {",
        "    var anchor = generateNumericToken('xxx');",
        "    var data = getData();",
        "    var states = [];",
        "    var cities = [];",
        "    var selectedCountry = 0;",
        "    var selectedState = 0;",
        "    selectedCountry = sharedState.get('selectedCountry')?parseInt(nodeState.get('selectedCountry')):0;",
        "    logger.error('sandlog: selected country {}', selectedCountry);",
        "    selectedState = sharedState.get('selectedState')?parseInt(nodeState.get('selectedState')):0;",
        "    logger.error('sandlog: selected state {}', selectedState);",
        "    if (callbacks.isEmpty()) {",
        "      var cbList = [];",
        "      var countryCb = new fr.ChoiceCallback('Select country', getCountries(data), selectedCountry, false);",
        "      countryCb.setSelectedIndex(selectedCountry);",
        "      cbList.push(countryCb);",
        "      states = getStates(data, selectedCountry);",
        "      var stateCb = new fr.ChoiceCallback('Select state', states, selectedState, false);",
        "      stateCb.setSelectedIndex(selectedState);",
        "      cbList.push(stateCb);",
        "      cities = getCities(data, selectedCountry, selectedState);",
        "      cbList.push(new fr.TextOutputCallback(0, `List of cities in ${states[selectedState]}`));",
        "      cities.forEach(e=>{",
        "        cbList.push(new fr.TextOutputCallback(0, e));",
        "      });",
        "",
        "      var script = `",
        "        setTimeout(function() {",
        "          console.log('script enter');",
        "          document.getElementsByClassName('multiselect__option').forEach(function(e) {",
        "            e.addEventListener('click', function() {",
        "              const hvCb = document.getElementById('selectionChanged');",
        "              const ev = new Event(\"change\");",
        "              hvCb.setAttribute('value', 'true');",
        "              console.log('invoking change on hidden value input');",
        "              hvCb.dispatchEvent(ev);",
        "              console.log('submitting...');",
        "              document.getElementById('loginButton_0').click();",
        "              return false;",
        "            })",
        "          })",
        "        }, 50);",
        "      `;",
        "      cbList.push(new fr.HiddenValueCallback('selectionChanged', 'false'));",
        "      cbList.push(new fr.ConfirmationCallback(0, ['Finish'], 0));",
        "      cbList.push(new fr.ScriptTextOutputCallback(script));",
        "      action = fr.Action.send.apply(null, cbList).build();",
        "    } else {",
        "      logger.error('sandlog: hidden text input: {}', callbacks.get(callbacks.size()-3).getValue());",
        "      if (callbacks.get(callbacks.size()-3).getValue() == 'true') { // check value of text input callback",
        "        // one of the category pickers was changed",
        "        if(selectedCountry != callbacks.get(0).getSelectedIndexes()[0]) {",
        "          selectedState = 0;",
        "        } else {",
        "          selectedState = callbacks.get(1).getSelectedIndexes()[0];",
        "        }",
        "        selectedCountry = callbacks.get(0).getSelectedIndexes()[0];",
        "        logger.error('sandlog: set selected country {}', selectedCountry);",
        "        logger.error('sandlog: set selected state {}', selectedState);  ",
        "        sharedState.put('selectedCountry', selectedCountry);",
        "        sharedState.put('selectedState', selectedState);",
        "        action = fr.Action.goTo('update').build();",
        "      } else {",
        "        // user clicked \"finish\"",
        "        action = fr.Action.goTo('complete').build();",
        "      }",
        "    }",
        "  } catch (e) {",
        "    logger.error('sandlog: error: {} ' + e, e);",
        "    outcome = 'error'",
        "  }",
        "})();"
      ]
    }
  }
}