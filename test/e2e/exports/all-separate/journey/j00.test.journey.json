{
  "circlesOfTrust": {},
  "emailTemplates": {},
  "innerNodes": {},
  "meta": {
    "exportDate": "2023-10-09T17:28:12.247Z",
    "exportTool": "frodo",
    "exportToolVersion": "v2.0.0-35 [v18.5.0]",
    "exportedBy": "volker.scheuber@forgerock.com",
    "origin": "https://openam-frodo-dev.forgeblocks.com/am",
    "originAmVersion": "7.4.0"
  },
  "nodes": {
    "01d3785f-7fb4-44a7-9458-72c380a9818f": {
      "_id": "01d3785f-7fb4-44a7-9458-72c380a9818f",
      "_outcomes": [
        {
          "displayName": "true",
          "id": "true"
        }
      ],
      "_type": {
        "_id": "ScriptedDecisionNode",
        "collection": true,
        "name": "Scripted Decision"
      },
      "inputs": [
        "*"
      ],
      "outcomes": [
        "true"
      ],
      "outputs": [
        "*"
      ],
      "script": "1b52a7e0-4019-40fa-958a-15a49870e901"
    },
    "39b48197-f4be-42b9-800a-866587b4b9b5": {
      "_id": "39b48197-f4be-42b9-800a-866587b4b9b5",
      "_outcomes": [
        {
          "displayName": "true",
          "id": "true"
        }
      ],
      "_type": {
        "_id": "ScriptedDecisionNode",
        "collection": true,
        "name": "Scripted Decision"
      },
      "inputs": [
        "*"
      ],
      "outcomes": [
        "true"
      ],
      "outputs": [
        "*"
      ],
      "script": "41c24257-d7fc-4654-8b46-c2666dc5b56d"
    },
    "3c1e8d61-0c48-44ba-86dc-52e9555b6aeb": {
      "_id": "3c1e8d61-0c48-44ba-86dc-52e9555b6aeb",
      "_outcomes": [
        {
          "displayName": "true",
          "id": "true"
        }
      ],
      "_type": {
        "_id": "ScriptedDecisionNode",
        "collection": true,
        "name": "Scripted Decision"
      },
      "inputs": [
        "*"
      ],
      "outcomes": [
        "true"
      ],
      "outputs": [
        "*"
      ],
      "script": "41c24257-d7fc-4654-8b46-c2666dc5b56d"
    },
    "513a2ab4-f0b8-4f94-b840-6fe14796cc84": {
      "_id": "513a2ab4-f0b8-4f94-b840-6fe14796cc84",
      "_outcomes": [
        {
          "displayName": "shared and level",
          "id": "shared and level"
        },
        {
          "displayName": "shared only",
          "id": "shared only"
        },
        {
          "displayName": "level only",
          "id": "level only"
        },
        {
          "displayName": "none",
          "id": "none"
        }
      ],
      "_type": {
        "_id": "ScriptedDecisionNode",
        "collection": true,
        "name": "Scripted Decision"
      },
      "inputs": [
        "*",
        "mode",
        "level"
      ],
      "outcomes": [
        "shared and level",
        "shared only",
        "level only",
        "none"
      ],
      "outputs": [
        "*",
        "mode",
        "level"
      ],
      "script": "5bbdaeff-ddee-44b9-b608-8d413d7d65a6"
    },
    "ba503a1e-633e-4d0d-ba18-c9a9b1105b5b": {
      "_id": "ba503a1e-633e-4d0d-ba18-c9a9b1105b5b",
      "_outcomes": [
        {
          "displayName": "true",
          "id": "true"
        }
      ],
      "_type": {
        "_id": "ScriptedDecisionNode",
        "collection": true,
        "name": "Scripted Decision"
      },
      "inputs": [
        "*"
      ],
      "outcomes": [
        "true"
      ],
      "outputs": [
        "*"
      ],
      "script": "3cb43516-ae69-433a-8787-501d45db14e9"
    },
    "d17ffaa1-2c61-4abd-9bb1-2559160d0a5c": {
      "_id": "d17ffaa1-2c61-4abd-9bb1-2559160d0a5c",
      "_outcomes": [
        {
          "displayName": "true",
          "id": "true"
        }
      ],
      "_type": {
        "_id": "ScriptedDecisionNode",
        "collection": true,
        "name": "Scripted Decision"
      },
      "inputs": [
        "*"
      ],
      "outcomes": [
        "true"
      ],
      "outputs": [
        "*"
      ],
      "script": "1b52a7e0-4019-40fa-958a-15a49870e901"
    }
  },
  "saml2Entities": {},
  "scripts": {
    "1b52a7e0-4019-40fa-958a-15a49870e901": {
      "_id": "1b52a7e0-4019-40fa-958a-15a49870e901",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "set the same shared state variable",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "shared",
      "script": "\"(function () {\\n  outcome = 'true';\\n  var level = nodeState.get('level').asInteger();\\n  sharedState.put('sharedValue', 'Level ' + level + ': This is a longer string value shared across all nested journeys. It contains an indicator in which level it was last set.');\\n}());\""
    },
    "3cb43516-ae69-433a-8787-501d45db14e9": {
      "_id": "3cb43516-ae69-433a-8787-501d45db14e9",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Display sharedState, transientState, and headers.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "debug",
      "script": "\"/* debug\\n *\\n * Author: volker.scheuber@forgerock.com\\n * \\n * Display sharedState, transientState, and headers.\\n * \\n * This script does not need to be parametrized. It will work properly as is.\\n * \\n * The Scripted Decision Node needs the following outcomes defined:\\n * - true\\n */\\nvar anchor = \\\"anchor-\\\".concat(generateNumericToken('xxx'));\\nvar halign = \\\"left\\\";\\nvar message = \\\"<p><b>Shared State</b>:<br/>\\\".concat(\\n      sharedState.toString()).concat(\\\"</p>\\\").concat(\\n    \\\"<p><b>Transient State</b>:<br/>\\\").concat(\\n      transientState.toString()).concat(\\\"</p>\\\").concat(\\n    \\\"<p><b>Request Headers</b>:<br/>\\\").concat(\\n      requestHeaders.toString()).concat(\\\"</p>\\\")\\nvar script = \\\"Array.prototype.slice.call(\\\\n\\\".concat(\\n  \\\"document.getElementsByClassName('callback-component')).forEach(\\\\n\\\").concat(\\n  \\\"function (e) {\\\\n\\\").concat(\\n  \\\"  var message = e.firstElementChild;\\\\n\\\").concat(\\n  \\\"  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '\\\").concat(anchor).concat(\\\"') {\\\\n\\\").concat(\\n  \\\"    message.className = \\\\\\\"text-left\\\\\\\";\\\\n\\\").concat(\\n  \\\"    message.align = \\\\\\\"\\\").concat(halign).concat(\\\"\\\\\\\";\\\\n\\\").concat(\\n  \\\"    message.innerHTML = '\\\").concat(message).concat(\\\"';\\\\n\\\").concat(\\n  \\\"  }\\\\n\\\").concat(\\n  \\\"})\\\")\\nvar fr = JavaImporter(\\n    org.forgerock.openam.auth.node.api.Action,\\n    javax.security.auth.callback.TextOutputCallback,\\n    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback\\n)\\nif (message.length && callbacks.isEmpty()) {\\n    action = fr.Action.send(\\n        new fr.TextOutputCallback(\\n            fr.TextOutputCallback.INFORMATION,\\n            anchor\\n        ),\\n        new fr.ScriptTextOutputCallback(script)\\n    ).build()\\n}\\nelse {\\n  action = fr.Action.goTo(\\\"true\\\").build();\\n}\\n\\n /*\\n  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.\\n  * \\n  * Example:\\n  * 'xxxxx' produces '28535'\\n  * 'xxx-xxx' produces '432-521'\\n  */\\nfunction generateNumericToken(format) {\\n    return format.replace(/[x]/g, function(c) {\\n        var r = Math.random()*10|0;\\n        var v = r;\\n        return v.toString(10);\\n    });\\n}\""
    },
    "41c24257-d7fc-4654-8b46-c2666dc5b56d": {
      "_id": "41c24257-d7fc-4654-8b46-c2666dc5b56d",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "set per level shared state variable",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "level",
      "script": "\"(function () {\\n  outcome = 'true';\\n  var level = nodeState.get('level').asInteger();\\n  sharedState.put('level' + level + 'Value', 'Level ' + level + ': This is a longer string value set at each level of the nested journeys. It contains an indicator in which level it was set.');\\n}());\""
    },
    "5bbdaeff-ddee-44b9-b608-8d413d7d65a6": {
      "_id": "5bbdaeff-ddee-44b9-b608-8d413d7d65a6",
      "context": "AUTHENTICATION_TREE_DECISION_NODE",
      "createdBy": "null",
      "creationDate": 0,
      "default": false,
      "description": "Check if mode has already been set.",
      "language": "JAVASCRIPT",
      "lastModifiedBy": "null",
      "lastModifiedDate": 0,
      "name": "mode",
      "script": "\"/* mode\\n *\\n * Author: volker.scheuber@forgerock.com\\n * \\n * Collect mode if not already set and set outcome to mode.\\n * \\n * This script does not need to be parametrized. It will work properly as is.\\n * \\n * The Scripted Decision Node needs the following outcomes defined:\\n * - 'shared and level'\\n * - 'shared only'\\n * - 'level only'\\n * - 'none'\\n */\\n(function () {\\n  var mode = nodeState.get('mode');\\n  if (mode) {\\n    outcome = mode.asString();\\n    var level = nodeState.get('level').asInteger() + 1;\\n    logger.error('mode: mode=' + mode.asString() + ', level=' + level);\\n    sharedState.put('level', level);\\n  }\\n  else {\\n    var choices = ['shared and level', 'shared only', 'level only', 'none'];\\n  \\n    var fr = JavaImporter(\\n      org.forgerock.openam.auth.node.api.Action,\\n      javax.security.auth.callback.ChoiceCallback\\n    )\\n\\n    if (callbacks.isEmpty()) {\\n      action = fr.Action.send([\\n        new fr.ChoiceCallback('Choose test mode', choices, 0, false)\\n      ]).build();\\n    } else {\\n      var choice = parseInt(callbacks.get(0).getSelectedIndexes()[0]);\\n      nodeState.putShared('mode', choices[choice]);\\n      nodeState.putShared('level', 0);\\n      action = fr.Action.goTo(choices[choice]).build();\\n    }\\n  }\\n}());\""
    }
  },
  "socialIdentityProviders": {},
  "themes": [],
  "tree": {
    "_id": "j00",
    "enabled": true,
    "entryNodeId": "513a2ab4-f0b8-4f94-b840-6fe14796cc84",
    "identityResource": "managed/alpha_user",
    "innerTreeOnly": false,
    "nodes": {
      "01d3785f-7fb4-44a7-9458-72c380a9818f": {
        "connections": {
          "true": "3c1e8d61-0c48-44ba-86dc-52e9555b6aeb"
        },
        "displayName": "shared",
        "nodeType": "ScriptedDecisionNode",
        "x": 392,
        "y": 173.015625
      },
      "39b48197-f4be-42b9-800a-866587b4b9b5": {
        "connections": {
          "true": "ba503a1e-633e-4d0d-ba18-c9a9b1105b5b"
        },
        "displayName": "level",
        "nodeType": "ScriptedDecisionNode",
        "x": 395,
        "y": 345.015625
      },
      "3c1e8d61-0c48-44ba-86dc-52e9555b6aeb": {
        "connections": {
          "true": "ba503a1e-633e-4d0d-ba18-c9a9b1105b5b"
        },
        "displayName": "level",
        "nodeType": "ScriptedDecisionNode",
        "x": 598,
        "y": 173.015625
      },
      "513a2ab4-f0b8-4f94-b840-6fe14796cc84": {
        "connections": {
          "level only": "39b48197-f4be-42b9-800a-866587b4b9b5",
          "none": "ba503a1e-633e-4d0d-ba18-c9a9b1105b5b",
          "shared and level": "01d3785f-7fb4-44a7-9458-72c380a9818f",
          "shared only": "d17ffaa1-2c61-4abd-9bb1-2559160d0a5c"
        },
        "displayName": "mode",
        "nodeType": "ScriptedDecisionNode",
        "x": 167,
        "y": 210.015625
      },
      "ba503a1e-633e-4d0d-ba18-c9a9b1105b5b": {
        "connections": {
          "true": "e301438c-0bd0-429c-ab0c-66126501069a"
        },
        "displayName": "debug",
        "nodeType": "ScriptedDecisionNode",
        "x": 1033,
        "y": 261.015625
      },
      "d17ffaa1-2c61-4abd-9bb1-2559160d0a5c": {
        "connections": {
          "true": "ba503a1e-633e-4d0d-ba18-c9a9b1105b5b"
        },
        "displayName": "shared",
        "nodeType": "ScriptedDecisionNode",
        "x": 393,
        "y": 259.015625
      }
    },
    "staticNodes": {
      "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
        "x": 1236,
        "y": 145
      },
      "e301438c-0bd0-429c-ab0c-66126501069a": {
        "x": 1236,
        "y": 253
      },
      "startNode": {
        "x": 50,
        "y": 250
      }
    },
    "uiConfig": {
      "categories": "[]"
    }
  }
}